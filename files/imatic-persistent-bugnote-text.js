(()=>{"use strict";function t(t,e,n){return`ImaticPersistentBugnoteText_${t}_${e}_${n}`}function e(t,e){localStorage.removeItem(t)}document.addEventListener("DOMContentLoaded",(function(){!async function(){const n=function(){const t=document.querySelector("#ImaticPersistentBugnoteText");if(null!=t)return JSON.parse(t.dataset.settings)}();if(null!==n){const o=n.issue_id,c=n.user_id,u=n.check_last_updated_url,s=n.bug_last_updated,r=document.querySelector("#bugnote_text");if(null!==r){const n=document.querySelector("#bugnoteadd"),a=document.querySelector("#bug-change-status-form"),i=async(t,c,i)=>{const l=await t(),d=i(l);console.log(l),""!==d&&(r.value=d),r.addEventListener("input",(()=>c(l,r.value))),null!==n&&n.addEventListener("submit",(function(){e(l)})),null!==a&&a.addEventListener("submit",(async function(t){t.preventDefault();try{const t=await async function(t,e,n){try{const o=await fetch(t,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({bugId:e,lastUpdated:n})}),c=await o.json();if(c.success)return n!=c.existingBugLastUpdated}catch(t){}}(u,o,s);!1===t&&e(l),a.submit()}catch(t){console.error("Error checking bug status:",t)}}))};i((async()=>null!==n?t(o,c,"bugnoteadd"):null!==a?t(o,c,"bug-change-status-form"):void 0),((t,e)=>{!function(t,e){const n=encodeURIComponent(e),o=CryptoJS.AES.encrypt(n,"secret-key").toString();localStorage.setItem(t,o)}(t,e)}),(t=>{const e=function(t){const e=localStorage.getItem(t);if(null===e)return null;const n=CryptoJS.AES.decrypt(e,"secret-key").toString(CryptoJS.enc.Utf8);return decodeURIComponent(n)}(t);return null!==e?e:""}))}}}()}))})();
//# sourceMappingURL=imatic-persistent-bugnote-text.js.map
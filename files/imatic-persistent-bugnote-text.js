!function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(o,r,function(e){return t[e]}.bind(null,r));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=38)}({38:function(t,e,n){"use strict";n.r(e),function(){function t(){const t=function(){const t=document.querySelector("#ImaticPersistentBugnoteText");if(null!=t)return JSON.parse(t.dataset.settings)}();if(null!==t){const e=t.issue_id,n=t.user_id,o=document.querySelector("#bugnote_text");if(null!==o){const t=function(t,e){const n="ImaticPersistentBugnoteText_"+t+"_"+e,o=localStorage.getItem(n);if(console.log(o),null===o)return null;const r=CryptoJS.AES.decrypt(o,"secret-key").toString(CryptoJS.enc.Utf8);return decodeURIComponent(r)}(e,n);null!==t&&(o.value=t),o.addEventListener("input",(function(){!function(t,e,n){const o="ImaticPersistentBugnoteText_"+t+"_"+e,r=encodeURIComponent(n),u=CryptoJS.AES.encrypt(r,"secret-key").toString();localStorage.setItem(o,u)}(e,n,o.value)}));const r=document.querySelector("#bugnoteadd");null!==r&&r.addEventListener("submit",(function(){!function(t,e){const n="ImaticPersistentBugnoteText_"+t+"_"+e;localStorage.removeItem(n)}(e,n)}))}}}document.addEventListener("DOMContentLoaded",(function(){t()}))}()}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
{"version":3,"file":"imatic-persistent-bugnote-text.js","mappings":"mBAAA,SAASA,EAAUC,EAASC,EAAQC,GAChC,MAAO,+BAA+BF,KAAWC,KAAUC,GAC/D,CAkBA,SAASC,EAAiBC,EAAKH,GAC3BI,aAAaC,WAAWF,EAC5B,CCiEIG,SAASC,iBAAiB,oBAAoB,YA3E9CC,iBAEI,MAAMC,EDUd,WACI,MAAMC,EAAKJ,SAASK,cAAc,gCAClC,GAAU,MAAND,EAGJ,OAAOE,KAAKC,MAAMH,EAAGI,QAAQL,SACjC,CChByBM,GAEjB,GAAI,OAASN,EAAU,CACnB,MAAMO,EAAQP,EAASQ,SACjBjB,EAASS,EAASS,QAClBC,EAAMV,EAASW,uBACfC,EAAcZ,EAASa,iBAEvBC,EAAkBjB,SAASK,cAAc,iBAE/C,GAAI,OAASY,EAAiB,CAC1B,MAAMC,EAAclB,SAASK,cAAc,eACrCc,EAA0BnB,SAASK,cAAc,2BAmBjDe,EAAoBlB,MAAOV,EAAW6B,EAAUC,KAClD,MAAMzB,QAAYL,IACZ+B,EAAaD,EAASzB,GAET,KAAf0B,IACAN,EAAgBO,MAAQD,GAI5BN,EAAgBhB,iBAAiB,SAAS,IAAMoB,EAASxB,EAAKoB,EAAgBO,SAE1E,OAASN,GACTA,EAAYjB,iBAAiB,UAAU,WACnCL,EAAiBC,EACrB,IAGA,OAASsB,GACTA,EAAwBlB,iBAAiB,UAAUC,eAAgBuB,GAC/DA,EAAMC,iBACN,IACI,MAAMC,QDlCtCzB,eAAqCW,EAAKH,EAAOK,GAE7C,IACI,MAAMa,QAAiBC,MAAMhB,EAAK,CAC9BiB,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAM1B,KAAK2B,UAAU,CACjBvB,MAAOA,EACPK,YAAaA,MAIfmB,QAAaN,EAASO,OAC5B,GAAID,EAAKE,QAGL,OAAOrB,GAFwBmB,EAAKG,sBAK5C,CAAE,MAAOC,GAET,CAGJ,CCQqDC,CAAsB1B,EAAKH,EAAOK,IACxC,IAAXY,GACA/B,EAAiBC,GAErBsB,EAAwBqB,QAC5B,CAAE,MAAOC,GACLC,QAAQD,MAAM,6BAA8BA,EAChD,CACJ,GACJ,EAGJrB,GAlDwBlB,SACA,OAAhBgB,EACO1B,EAAUkB,EAAOhB,EAAQ,cACG,OAA5ByB,EACA3B,EAAUkB,EAAOhB,EAAQ,+BAD7B,IAKY,CAACG,EAAK8C,MDhC7C,SAAyB9C,EAAK8C,GAC1B,MAAMC,EAAcC,mBAAmBF,GACjCG,EAAgBC,SAASC,IAAIC,QAAQL,EAAa,cAAcM,WACtEpD,aAAaqD,QAAQtD,EAAKiD,EAC9B,CC6BoBM,CAAgBvD,EAAK8C,EAAK,IAGN9C,IACpB,MAAM8C,ED/B1B,SAAyB9C,GACrB,MAAMiD,EAAgBhD,aAAauD,QAAQxD,GAC3C,GAAsB,OAAlBiD,EACA,OAAO,KAEX,MACMQ,EADQP,SAASC,IAAIO,QAAQT,EAAe,cACxBI,SAASH,SAASS,IAAIC,MAChD,OAAOC,mBAAmBJ,EAC9B,CCuBiCK,CAAgB9D,GAC7B,OAAgB,OAAT8C,EAAgBA,EAAO,EAAE,GAyCxC,CACJ,CACJ,CAGIiB,EAEJ,G","sources":["webpack:///./js/utils.js","webpack:///./js/index.js"],"sourcesContent":["function createKey(issueId, userId, formType) {\n    return `ImaticPersistentBugnoteText_${issueId}_${userId}_${formType}`;\n}\n\nfunction saveBugnoteText(key, text) {\n    const encodedText = encodeURIComponent(text);\n    const encryptedText = CryptoJS.AES.encrypt(encodedText, 'secret-key').toString();\n    localStorage.setItem(key, encryptedText);\n}\n\nfunction loadBugnoteText(key) {\n    const encryptedText = localStorage.getItem(key);\n    if (encryptedText === null) {\n        return null;\n    }\n    const bytes = CryptoJS.AES.decrypt(encryptedText, 'secret-key');\n    const decodedText = bytes.toString(CryptoJS.enc.Utf8);// console.log(decodedText)\n    return decodeURIComponent(decodedText);\n}\n\nfunction clearBugnoteText(key, userId) {\n    localStorage.removeItem(key);\n}\n\nfunction getSettings() {\n    const el = document.querySelector(\"#ImaticPersistentBugnoteText\");\n    if (el == null) {\n        return;\n    }\n    return JSON.parse(el.dataset.settings);\n}\n\nasync function checkIfIBugWasChanged(url, bugId, lastUpdated) {\n\n    try {\n        const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                bugId: bugId,\n                lastUpdated: lastUpdated\n            }),\n        });\n\n        const data = await response.json()\n        if (data.success) {\n            const existingBugLastUpdated = data.existingBugLastUpdated;\n\n            return lastUpdated != existingBugLastUpdated\n        }\n\n    } catch (err) {\n\n    }\n\n\n}\n\nexport {saveBugnoteText, loadBugnoteText, clearBugnoteText, createKey, getSettings, checkIfIBugWasChanged};\n","import {\n    saveBugnoteText,\n    loadBugnoteText,\n    clearBugnoteText,\n    createKey,\n    getSettings,\n    checkIfIBugWasChanged\n} from './utils';\n\n(function () {\n    \"use strict\";\n\n    async function initPersistentBugnoteText() {\n\n        const settings = getSettings();\n\n        if (null !== settings) {\n            const bugId = settings.issue_id;\n            const userId = settings.user_id;\n            const url = settings.check_last_updated_url\n            const lastUpdated = settings.bug_last_updated\n\n            const bugnoteTextArea = document.querySelector(\"#bugnote_text\");\n\n            if (null !== bugnoteTextArea) {\n                const bugnoteForm = document.querySelector(\"#bugnoteadd\");\n                const bugnoteChangeStatusForm = document.querySelector(\"#bug-change-status-form\");\n\n                const handleCreateKey = async () => {\n                    if (bugnoteForm !== null) {\n                        return createKey(bugId, userId, 'bugnoteadd')\n                    } else if (bugnoteChangeStatusForm !== null) {\n                        return createKey(bugId, userId, 'bug-change-status-form')\n                    }\n                }\n\n                const handleSaveText = (key, text) => {\n                    saveBugnoteText(key, text);\n                }\n\n                const handleLoadText = (key) => {\n                    const text = loadBugnoteText(key)\n                    return text !== null ? text : '';\n                }\n\n                const handleBugnoteText = async (createKey, saveText, loadText) => {\n                    const key = await createKey()\n                    const loadedText = loadText(key);\n\n                    if (loadedText !== '') {\n                        bugnoteTextArea.value = loadedText;\n\n                    }\n\n                    bugnoteTextArea.addEventListener('input', () => saveText(key, bugnoteTextArea.value))\n\n                    if (null !== bugnoteForm) {\n                        bugnoteForm.addEventListener(\"submit\", function () {\n                            clearBugnoteText(key, userId);\n                        });\n                    }\n\n                    if (null !== bugnoteChangeStatusForm) {\n                        bugnoteChangeStatusForm.addEventListener(\"submit\", async function (event) {\n                            event.preventDefault()\n                            try {\n                                const result = await checkIfIBugWasChanged(url, bugId, lastUpdated);\n                                if (result === false) {\n                                    clearBugnoteText(key, userId)\n                                }\n                                bugnoteChangeStatusForm.submit();\n                            } catch (error) {\n                                console.error('Error checking bug status:', error);\n                            }\n                        });\n                    }\n                }\n\n                handleBugnoteText(\n                    handleCreateKey,\n                    handleSaveText,\n                    handleLoadText\n                )\n            }\n        }\n    }\n\n    document.addEventListener(\"DOMContentLoaded\", function () {\n        initPersistentBugnoteText();\n\n    });\n})\n();\n\n\n\n\n"],"names":["createKey","issueId","userId","formType","clearBugnoteText","key","localStorage","removeItem","document","addEventListener","async","settings","el","querySelector","JSON","parse","dataset","getSettings","bugId","issue_id","user_id","url","check_last_updated_url","lastUpdated","bug_last_updated","bugnoteTextArea","bugnoteForm","bugnoteChangeStatusForm","handleBugnoteText","saveText","loadText","loadedText","value","event","preventDefault","result","response","fetch","method","headers","body","stringify","data","json","success","existingBugLastUpdated","err","checkIfIBugWasChanged","submit","error","console","text","encodedText","encodeURIComponent","encryptedText","CryptoJS","AES","encrypt","toString","setItem","saveBugnoteText","getItem","decodedText","decrypt","enc","Utf8","decodeURIComponent","loadBugnoteText","initPersistentBugnoteText"],"sourceRoot":""}